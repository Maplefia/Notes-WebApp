/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-16 19:22:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import uk.ac.ucl.model.Note;
import uk.ac.ucl.model.NoteElement;
import java.util.List;
import java.util.Arrays;
import uk.ac.ucl.model.Index;

public final class categoriesList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(7);
    _jspx_imports_classes.add("uk.ac.ucl.model.Index");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("uk.ac.ucl.model.Note");
    _jspx_imports_classes.add("uk.ac.ucl.model.NoteElement");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("  <title>Categories List</title>\n");
      out.write("  <link href=\"./noteOpened.css\" rel=\"stylesheet\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
 Boolean editMode = (Boolean) request.getAttribute("editCategories"); 
      out.write("\n");
      out.write("<form action=\"/editCategories.html\" method=\"POST\">\n");
      out.write("  <div class=\"Navbar\">\n");
      out.write("    <div><a href=\"/\">Home</a></div>\n");
      out.write("      <div>");
 if (editMode == false) { 
      out.write("\n");
      out.write("      <button type=\"submit\" name=\"editingCategories\" value=\"true\">Edit</button>\n");
      out.write("      ");
 } else { 
      out.write("\n");
      out.write("      <button type=\"submit\" name=\"savingCategories\" value=\"true\">Save</button> ");
 } 
      out.write("\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("  <div class=\"noteWrapper\">\n");
      out.write("  ");
 List<Index> allIndexes = (List<Index>)request.getAttribute("allIndexes");
    if (allIndexes == null || allIndexes.subList(1,allIndexes.size()).isEmpty()) {
      out.write("\n");
      out.write("  <p>No categories so far!</p>\n");
      out.write("  ");
 } else { 
      out.write("\n");
      out.write("      <h2 class=\"noteTitleBar\">Categories</h2>\n");
      out.write("      <hr>\n");
      out.write("      <div class=\"noteContents\">\n");
      out.write("        ");
 for (Index index : allIndexes.subList(1,allIndexes.size())) {
          String category = index.getName();
          String id = index.getId();
        
      out.write("\n");
      out.write("        <div class=\"noteElement\">\n");
      out.write("          ");
 if (!editMode) { 
      out.write("\n");
      out.write("              <div class=\"noteText\">\n");
      out.write("                <pre>");
      out.print(category);
      out.write("</pre>\n");
      out.write("              </div>\n");
      out.write("          ");
 } else { 
      out.write("\n");
      out.write("            <div class=\"editElementWrapper\">\n");
      out.write("              <textarea name=\"edit_");
      out.print(id);
      out.write("\" oninput=\"resizeTextAreas(this)\">");
      out.print( category );
      out.write("</textarea>\n");
      out.write("              <button type=\"submit\" name=\"delete_");
      out.print(id);
      out.write("\" value=\"true\" class=\"deleteElement\">Delete Category</button>\n");
      out.write("            </div>\n");
      out.write("          ");
 } 
      out.write("\n");
      out.write("        </div>\n");
      out.write("        ");
} }
      out.write("\n");
      out.write("    </div>\n");
      out.write("    <div class=\"Buffer\"></div>\n");
      out.write("    <div class=\"addElements\">\n");
      out.write("      <button type=\"submit\" name=\"addCategory\" value=\"true\">Add Category</button>\n");
      out.write("    </div>\n");
      out.write("    </div>\n");
      out.write("  </form>\n");
      out.write("</div>\n");
      out.write("<script>\n");
      out.write(" function resizeTextAreas(textarea) {\n");
      out.write("    textarea.style.height = 'auto';\n");
      out.write("    textarea.style.height = Math.max(((textarea.scrollHeight / window.innerHeight) * 100),2) + 'vh';\n");
      out.write(" }\n");
      out.write(" window.onload = function() {\n");
      out.write("   var textareas = document.querySelectorAll(\"textarea\");\n");
      out.write("   textareas.forEach(textarea => resizeTextAreas(textarea));\n");
      out.write(" }\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
